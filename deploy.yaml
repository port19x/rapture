# Common Errors:
# - Provisioning/Gathering -> `sudo echo hi`
#   (fails with sudo: a password is required)
# - Provisioning/Register SSH -> API token expired
#   (fails with a 401)
# - Configure/Gathering -> `rm ~/.ssh/known_hosts`
#   (fails with remote host identification changed)
# - Configure/Gathering -> just run again
#   (fails with UNREACHABLE)
---
- name: Provision Digital Ocean Droplet
  become: true
  hosts: localhost
  vars:
    oauth_token: "{{ lookup('ansible.builtin.file', 'token') }}"
  tasks:
    - name: "Register SSH Public Key"
      community.digitalocean.digital_ocean_sshkey:
        name: "Github Token"
        oauth_token: "{{ oauth_token }}"
        ssh_pub_key: "{{ lookup('ansible.builtin.file', '~/.ssh/github.pub') }}"
        state: present
      register: sshkey_result
    - name: "Create Droplet"
      community.digitalocean.digital_ocean_droplet:
        state: present
        oauth_token: "{{ oauth_token }}"
        name: "{{ item }}"
        size: s-1vcpu-512mb-10gb
        region: fra1
        image: debian-11-x64
        unique_name: true
        ssh_keys: ["{{ sshkey_result.data.ssh_key.id }}"]
      with_inventory_hostnames:
        - digitalocean
      register: droplet_result
    - name: Persist IP address in hostfile
      become: true # Do "sudo echo hi" or sth if you get an error
      ansible.builtin.lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item.data.droplet.name }}$'
        line: "{{ item.data.droplet.networks.v4.0.ip_address }} {{ item.data.droplet.name }}"
        state: present
      with_items: "{{ droplet_result.results }}"

- name: Install Infra Stack
  hosts: all
  become: true
  tasks:
    - name: Import Grafana GPG Key
      ansible.builtin.apt_key:
        url: https://packages.grafana.com/gpg.key
        state: present
    - name: Add Grafana Repo
      ansible.builtin.apt_repository:
        repo: deb https://packages.grafana.com/oss/deb stable main
        state: present
    - name: Install The Packages
      ansible.builtin.apt:
        pkg:
          - nginx
          - certbot
          - python3-certbot-nginx
          - git
          - docker.io
          - prometheus
          - prometheus-nginx-exporter
          - prometheus-node-exporter
          - grafana

- name: Configure Infra Stack
  hosts: all
  become: true
  tasks:
    - name: Copy Grafana Config
      ansible.builtin.copy:
        src: config_files/grafana.ini
        dest: /etc/grafana/grafana.ini
        mode: '0644'
    - name: Copy Prometheus Config
      ansible.builtin.copy:
        src: config_files/prometheus.yml
        dest: /etc/prometheus/prometheus.yml
        mode: '0644'
    - name: Copy Nginx Config
      ansible.builtin.copy:
        src: config_files/nginx_exporter.conf
        dest: /etc/nginx/conf.d/nginx_exporter.conf
        mode: '0644'
    - name: Copy Docker Config
      ansible.builtin.copy:
        src: config_files/docker-daemon.json
        dest: /etc/docker/daemon.json
        mode: '0644'

- name: Start Up Infra Stack
  hosts: all
  become: true
  tasks:
    - name: Start Services
      ansible.builtin.systemd:
        daemon_reload: true
        enabled: true
        state: restarted
        name: "{{ item }}"
      with_items:
        - nginx
        - docker
        - prometheus-node-exporter
        - prometheus-nginx-exporter
        - prometheus
        - grafana-server

# - name: Deploy Personal Blog
#   hosts: all
#   become: true
#   vars:
#     blog_repo: https://github.com/port19x/port19.xyz.git
#     blog_directory: /var/www/port19.xyz
#   tasks:
#     - name: Clone blog repository
#       ansible.builtin.git:
#         repo: "{{ blog_repo }}"
#         dest: "{{ blog_directory }}"
#         version: gh-pages
#         force: true
#     - name: Configure Nginx for the blog
#       ansible.builtin.copy:
#         dest: /etc/nginx/sites-available/port19.xyz
#         mode: '0644'
#         content: |
#           server {
#               listen 80;
#               server_name rapturev2.example.com; #port19.xyz
#               root {{ blog_directory }};
#               index index.html;
#               location / {
#                   try_files $uri $uri/ =404;
#               }
#           }
#     - name: Enable blog site
#       ansible.builtin.file:
#         src: /etc/nginx/sites-available/port19.xyz
#         dest: /etc/nginx/sites-enabled/port19.xyz
#         state: link
#    # - name: Obtain SSL certificate with Certbot
#    #  ansible.builtin.command: certbot --nginx --non-interactive --agree-tos --redirect --domain port19.xyz
#     - name: Restart Nginx
#       ansible.builtin.service:
#         name: nginx
#         state: restarted
