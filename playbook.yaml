# Common Errors:
# - Provisioning/Gathering -> `sudo echo hi`
#   (fails with sudo: a password is required)
# - Provisioning/Register SSH -> API token expired
#   (fails with a 401)
# - Configure/Gathering -> `rm ~/.ssh/known_hosts`
#   (fails with remote host identification changed)
# - Configure/Gathering -> just run again
#   (fails with UNREACHABLE)
---
- name: Provision Digital Ocean Droplet
  become: true
  hosts: localhost
  vars:
    oauth_token: "{{ lookup('ansible.builtin.file', '.digital-ocean-token') }}"
  tasks:
    - name: "Register SSH Public Key"
      community.digitalocean.digital_ocean_sshkey:
        name: "Github Token"
        oauth_token: "{{ oauth_token }}"
        ssh_pub_key: "{{ lookup('ansible.builtin.file', '~/.ssh/github.pub') }}"
        state: present
      register: sshkey_result
    - name: "Create Droplet"
      community.digitalocean.digital_ocean_droplet:
        state: present
        oauth_token: "{{ oauth_token }}"
        name: "{{ item }}"
        size: s-1vcpu-512mb-10gb
        region: fra1
        image: debian-11-x64
        unique_name: true
        ssh_keys: ["{{ sshkey_result.data.ssh_key.id }}"]
      with_inventory_hostnames:
        - digitalocean
      register: droplet_result
    - name: Persist IP address in hostfile
      become: true # Do "sudo echo hi" or sth if you get an error
      ansible.builtin.lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item.data.droplet.name }}$'
        line: "{{ item.data.droplet.networks.v4.0.ip_address }} {{ item.data.droplet.name }}"
        state: present
      with_items: "{{ droplet_result.results }}"

- name: Install Infra Stack
  hosts: all
  become: true
  tasks:
    - name: Import Grafana GPG Key
      ansible.builtin.apt_key:
        url: https://packages.grafana.com/gpg.key
        state: present
    - name: Add Grafana Repo
      ansible.builtin.apt_repository:
        repo: deb https://packages.grafana.com/oss/deb stable main
        state: present
    - name: Install The Packages
      ansible.builtin.apt:
        pkg:
          - nginx
          - certbot
          - python3-certbot-nginx
          - git
          - ufw
          - docker.io
          - docker-compose
          - prometheus
          - prometheus-node-exporter
          - grafana

- name: Configure Infra Stack
  hosts: all
  become: true
  tasks:
    - name: Copy Grafana Config
      ansible.builtin.copy:
        src: config_files/grafana.ini
        dest: /etc/grafana/grafana.ini
        mode: '0644'
    - name: Copy Grafana Datasource Config
      ansible.builtin.copy:
        src: config_files/grafana-datasources.yml
        dest: /etc/grafana/provisioning/datasources/datasources.yml
        mode: '0644'
    - name: Copy Grafana Dashboard Config
      ansible.builtin.copy:
        src: config_files/grafana-dashboard.yml
        dest: /etc/grafana/provisioning/dashboards/dashboard.yml
        mode: '0644'
    - name: Copy Grafana Dashboard
      ansible.builtin.copy:
        src: config_files/grafana-dashboard.json
        dest: /etc/grafana/provisioning/dashboards/dashboard.json
        mode: '0644'
    - name: Copy Prometheus Config
      ansible.builtin.copy:
        src: config_files/prometheus.yml
        dest: /etc/prometheus/prometheus.yml
        mode: '0644'
    - name: Copy Nginx Config
      ansible.builtin.copy:
        src: config_files/nginx.conf
        dest: /etc/nginx/nginx.conf
        mode: '0644'
    - name: Copy Docker Compose file
      ansible.builtin.copy:
        src: config_files/docker-compose.yml
        dest: /opt/docker-compose.yml
        mode: '0644'
    - name: UFW allow 80, 443 and 22 ports
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - 80   # HTTP
        - 443  # HTTPS
        - 22   # SSH
    - name: Enable UFW
      community.general.ufw:
        state: enabled

- name: Deploy Blog
  hosts: all
  become: true
  tasks:
    - name: Clone blog repository
      ansible.builtin.git:
        repo: https://github.com/port19x/port19.xyz.git
        dest: /var/www/port19.xyz
        version: gh-pages
        force: true
   # - name: Obtain SSL certificate with Certbot
   #  ansible.builtin.command: certbot --nginx --non-interactive --agree-tos --redirect --domain port19.xyz

- name: Start Up Infra Stack
  hosts: all
  become: true
  tasks:
    - name: (Re-) Start Services
      ansible.builtin.systemd:
        daemon_reload: true
        enabled: true
        state: restarted
        name: "{{ item }}"
      with_items:
        - nginx
        - docker
        - prometheus-node-exporter
        - prometheus
        - grafana-server
    - name: Docker Compose
      community.docker.docker_compose:
        project_src: /opt
